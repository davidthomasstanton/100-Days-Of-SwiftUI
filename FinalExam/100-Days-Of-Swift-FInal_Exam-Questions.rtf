{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 .SFNS-Regular_wdth_opsz110000_GRAD_wght1F40000;\f5\fnil\fcharset0 HelveticaNeue-Italic;
}
{\colortbl;\red255\green255\blue255;\red212\green212\blue212;\red21\green21\blue23;\red222\green43\blue91;
\red252\green33\blue37;\red33\green201\blue14;}
{\*\expandedcolortbl;;\cssrgb\c86275\c86275\c86275;\cssrgb\c10980\c10980\c11765;\cssrgb\c90588\c27059\c43137;
\cssrgb\c100000\c23137\c18824;\cssrgb\c9412\c80784\c5882;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
\margl1440\margr1440\vieww15720\viewh14440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Hacking with Swift\
\
Final Exam\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls1\ilvl0
\f1\b\fs26\fsmilli13200 \cf2 \cb3 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0The\'a0
\f3\b \cf4 \strokec4 NavigationBar
\f2\b0 \cf2 \strokec2 \'a0view lets us show new views and also place text at the top of the screen.
\f1\b \cf5 \strokec5 This functionality is provided by\'a0
\f3 \cf4 \strokec4 NavigationStack
\f1 \cf5 \strokec5 , not\'a0
\f3 \cf4 \strokec4 NavigationBar
\f1 \cf5 \strokec5 .
\f2\b0 \cf2 \cb1 \strokec2 \
\ls1\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0We can send\'a0
\f3\b \cf4 \strokec4 nil
\f2\b0 \cf2 \strokec2 \'a0to the\'a0
\f3\b \cf4 \strokec4 animation()
\f2\b0 \cf2 \strokec2 \'a0modifier.
\f1\b \cf6 \strokec6 This disables animation.
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f4\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Question 24/100: Which of these statements are true?\
\pard\pardeftab720\sa600\partightenfactor0

\f5\i\fs26\fsmilli13200 \cf2 Hint:\'a0Click to show.
\f2\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls2\ilvl0
\f1\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0We can bind an\'a0
\f3\b \cf4 \strokec4 alert()
\f2\b0 \cf2 \strokec2 \'a0modifier to an optional value.
\f1\b \cf6 \strokec6 We also need to provide a Boolean to determine when the alert is shown, but the optional does get unwrapped for us.
\f2\b0 \cf2 \cb1 \strokec2 \
\ls2\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0SF Symbols don't have any default accessibility labels.
\f1\b \cf5 \strokec5 SF Symbols have their string name read by default.
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\pard\pardeftab720\partightenfactor0

\f4\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Question 40/100: Which of these statements are true?\
\pard\pardeftab720\sa600\partightenfactor0

\f5\i\fs26\fsmilli13200 \cf2 Hint:\'a0Click to show.
\f2\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls3\ilvl0
\f1\b \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0You can't use a\'a0
\f3\b \cf4 \strokec4 switch
\f2\b0 \cf2 \strokec2 \'a0statement inside a SwiftUI view.
\f1\b \cf5 \strokec5 They work fine, just always make sure they are exhaustive!
\f2\b0 \cf2 \cb1 \strokec2 \
\ls3\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0We can force a navigation stack to use large titles by specifying a title display mode of\'a0
\f3\b \cf4 \strokec4 .inline
\f2\b0 \cf2 \strokec2 .
\f1\b \cf6 \strokec6 This works best on detail views.
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0

\f4\fs30 \cf2 \cb3 Question 42/100: Which of these statements are true?\
\pard\pardeftab720\sa600\partightenfactor0

\f5\i\fs26\fsmilli13200 \cf2 Hint:\'a0Click to show.
\f2\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls4\ilvl0
\f1\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0We must always return\'a0
\f3\b \cf4 \strokec4 some View
\f2\b0 \cf2 \strokec2 \'a0from a SwiftUI view body.
\f1\b \cf5 \strokec5 You can return an explicit type if you want, but it's not recommended.
\f2\b0 \cf2 \cb1 \strokec2 \
\ls4\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0We can use the\'a0
\f3\b \cf4 \strokec4 ShareLink
\f2\b0 \cf2 \strokec2 \'a0view to let users export data from our app.
\f1\b \cf6 \strokec6 This is great for sharing text, URLs, images, and more.
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f4\fs30 \cf2 \cb3 Question 61/100: Which of these statements are true?\
\pard\pardeftab720\sa600\partightenfactor0

\f5\i\fs26\fsmilli13200 \cf2 Hint:\'a0Click to show.
\f2\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls5\ilvl0
\f1\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0Classes that are used with\'a0
\f3\b \cf4 \strokec4 @State
\f2\b0 \cf2 \strokec2 \'a0must use the\'a0
\f3\b \cf4 \strokec4 @Observable
\f2\b0 \cf2 \strokec2 \'a0macro.
\f1\b \cf5 \strokec5 You don't need the macro unless you specifically want SwiftUI to watch the object for changes.
\f2\b0 \cf2 \cb1 \strokec2 \
\ls5\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0Asynchronous functions are able to sleep while their work completes.
\f1\b \cf6 \strokec6 This allows our app to perform other work at the same time.
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\qc\partightenfactor0

\fs28 \cf2 \cb3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0

\fs26\fsmilli13200 \cf2 \cb1 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls6\ilvl0
\f1\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0SwiftUI's buttons require a function that accepts the button that got tapped as its only parameter.
\f1\b \cf5 \strokec5 Buttons require a function that accepts no parameters and returns nothing.
\f2\b0 \cf2 \cb1 \strokec2 \
\ls6\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0
\f3\b \cf4 \strokec4 @Binding
\f2\b0 \cf2 \strokec2 \'a0lets us share one value in two places.
\f1\b \cf6 \strokec6 It's mainly used for creating custom UI components.
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\tx720\pardeftab720\sa200\partightenfactor0

\fs28 \cf2 \cb3 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f4\fs30 \cf2 \cb3 \strokec2 Question 71/100: Which of these statements are true?\
\pard\pardeftab720\sa600\partightenfactor0

\f5\i\fs26\fsmilli13200 \cf2 Hint:\'a0Click to show.
\f2\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls7\ilvl0
\f1\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0The\'a0
\f3\b \cf4 \strokec4 @Bindable
\f2\b0 \cf2 \strokec2 \'a0property wrapper is very different from the\'a0
\f3\b \cf4 \strokec4 @Binding
\f2\b0 \cf2 \strokec2 \'a0property wrapper.
\f1\b \cf6 \strokec6 Use\'a0
\f3 \cf4 \strokec4 @Bindable
\f1 \cf6 \strokec6 \'a0when you want to work with a object that uses the\'a0
\f3 \cf4 \strokec4 @Observable
\f1 \cf6 \strokec6 \'a0macro, and use\'a0
\f3 \cf4 \strokec4 @Binding
\f1 \cf6 \strokec6 \'a0when you want to observe a simple value such as an integer or a string.
\f2\b0 \cf2 \cb1 \strokec2 \
\ls7\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0The\'a0
\f3\b \cf4 \strokec4 sensoryFeedback()
\f2\b0 \cf2 \strokec2 \'a0modifier lets us make haptic effects on iPad.
\f1\b \cf5 \strokec5 iPads have no haptic hardware, so they cannot create haptic effects.
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\tx720\pardeftab720\sa200\partightenfactor0

\fs28 \cf2 \cb3 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f4\fs30 \cf2 \cb3 \strokec2 Question 72/100: Which of these statements are true?\
\pard\pardeftab720\sa600\partightenfactor0

\f5\i\fs26\fsmilli13200 \cf2 Hint:\'a0Click to show.
\f2\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls8\ilvl0
\f1\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0Alerts and confirmation dialogs look the same on iPhone.
\f1\b \cf5 \strokec5 Alerts appear in the center of the screen, whereas confirmation dialogs slide up from the bottom.
\f2\b0 \cf2 \cb1 \strokec2 \
\ls8\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0Breaking SwiftUI views into smaller views has little to no performance impact.
\f1\b \cf6 \strokec6 SwiftUI does an excellent job of optimizing this behavior.
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\tx720\pardeftab720\sa200\partightenfactor0

\fs28 \cf2 \cb3 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f4\fs30 \cf2 \cb3 \strokec2 Question 74/100: Which of these statements are true?\
\pard\pardeftab720\sa600\partightenfactor0

\f5\i\fs26\fsmilli13200 \cf2 Hint:\'a0Click to show.
\f2\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls9\ilvl0
\f1\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0The\'a0
\f3\b \cf4 \strokec4 @State
\f2\b0 \cf2 \strokec2 \'a0property wrapper places our properties inside a\'a0
\f3\b \cf4 \strokec4 State
\f2\b0 \cf2 \strokec2 \'a0struct.
\f1\b \cf6 \strokec6 Behind the scenes, this is actually similar to how optionals work.
\f2\b0 \cf2 \cb1 \strokec2 \
\ls9\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0An\'a0
\f3\b \cf4 \strokec4 @Observable
\f2\b0 \cf2 \strokec2 \'a0struct will notify all views that use it when one of its properties change.
\f1\b \cf5 \strokec5 Structs cannot be used with\'a0
\f3 \cf4 \strokec4 @Observable
\f1 \cf5 \strokec5 .
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\tx720\pardeftab720\sa200\partightenfactor0

\fs28 \cf2 \cb3 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f4\fs30 \cf2 \cb3 \strokec2 Question 78/100: Which of these statements are true?\
\pard\pardeftab720\sa600\partightenfactor0

\f5\i\fs26\fsmilli13200 \cf2 Hint:\'a0Click to show.
\f2\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls10\ilvl0
\f1\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0Properties sent into the\'a0
\f3\b \cf4 \strokec4 environment()
\f2\b0 \cf2 \strokec2 \'a0modifier must use the\'a0
\f3\b \cf4 \strokec4 @Observable
\f2\b0 \cf2 \strokec2 \'a0macro.
\f1\b \cf6 \strokec6 Behind the scenes,\'a0
\f3 \cf4 \strokec4 @Observable
\f1 \cf6 \strokec6 \'a0adds conformance to a protocol of the same name, which is what the\'a0
\f3 \cf4 \strokec4 environment()
\f1 \cf6 \strokec6 \'a0modifier looks for.
\f2\b0 \cf2 \cb1 \strokec2 \
\ls10\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0The\'a0
\f3\b \cf4 \strokec4 disabled()
\f2\b0 \cf2 \strokec2 \'a0modifier can read any kind of property, but must not be used with methods.
\f1\b \cf5 \strokec5 You can use a method if you want, as long as it returns a Boolean.
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\tx720\pardeftab720\sa200\partightenfactor0

\fs28 \cf2 \cb3 \strokec2 \
\pard\pardeftab720\partightenfactor0

\f4\fs30 \cf2 \cb3 \strokec2 Question 85/100: Which of these statements are true?\
\pard\pardeftab720\sa600\partightenfactor0

\f5\i\fs26\fsmilli13200 \cf2 Hint:\'a0Click to show.
\f2\i0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0
\ls11\ilvl0
\f1\b \cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 1:
\f2\b0 \'a0If we use\'a0
\f3\b \cf4 \strokec4 .accessibilityElement(children: .ignore)
\f2\b0 \cf2 \strokec2 \'a0the entire view becomes invisible to VoiceOver.
\f1\b \cf5 \strokec5 The things inside the view aren't accessible individually, but the parent view is.
\f2\b0 \cf2 \cb1 \strokec2 \
\ls11\ilvl0
\f1\b \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Option 2:
\f2\b0 \'a0When we import a Core ML model into Xcode, it will automatically generate a Swift class for us to use.
\f1\b \cf6 \strokec6 This lets us create an instance of the model and request a prediction in only two lines of code.
\f2\b0 \cf2 \cb1 \strokec2 \
\pard\pardeftab720\qc\partightenfactor0

\fs28 \cf2 \cb3 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa200\partightenfactor0

\fs26\fsmilli13200 \cf2 \cb1 \strokec2 \
}